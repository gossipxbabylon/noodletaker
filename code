<!DOCTYPE html>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->
<html>
    <head>
        <script src="//cdn.jsdelivr.net/npm/phaser@3.24.1/dist/phaser.js"></script>
        <title>NoodleTaker</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <script type="text/javascript">
            //Configuración de la escena
            var config = {
                type: Phaser.CANVAS,
                width: 1400,
                height: 750,
                physics: {
                    default: 'arcade',
                    arcade: {
                        gravity: {y: 980},
                        debug: false
                    }
                },
                scene: {
                    preload: preload,
                    create: create,
                    update: update
                }
            };

            var game = new Phaser.Game(config);

            //Atributos y variables
            var fondoCasa1;

            var player1;
            var player2;
            var samurai;
            var powerUp;
            var finishLine;

            var cursors;
            var keyW;

            var ground;
            var platforms;
            var platformsSpeed;

            var p1WinsText;
            var p2WinsText;

            var counter;

            var stopP1Bool = false;
            var stopP2Bool = false;

            var startGameBool = false;
            
            var startGameTimer;
            var finishLineTimer;

            //Cargar los archivos
            function preload() {
                this.load.image('casa1', 'assets/fondoCasas1.png');
                this.load.image('ground', 'assets/platform.png');
                this.load.image('platform', 'assets/platform.png');
                this.load.image('finishLine', 'assets/platform.png');
                this.load.spritesheet('player1', 'assets/ninja1.png', {
                    frameWidth: 697,
                    frameHeight: 1004
                });
                this.load.spritesheet('player2', 'assets/ninja2.png', {
                    frameWidth: 697,
                    frameHeight: 1004
                });

                this.load.spritesheet('samurai', 'assets/samurai.png', {
                    frameWidth: 800,
                    frameHeight: 600
                });

                this.load.spritesheet('powerup', 'assets/dude.png', {
                    frameWidth: 32,
                    frameHeight: 48
                });
            }
            ;

            //Creación de sprites y objetos
            function create() {
                //Fondo en movimiento
                this.marioBg = this.add.tileSprite(400, 300, config.width, config.height, 'casa1');
                this.marioBg.setScale(2, 2);

                //Suelo
                ground = this.physics.add.sprite(config.width / 2, 750, 'ground');
                ground.setScale(4, 1);



                //Jugadores
                player1 = this.physics.add.sprite(600, 650, 'player1');
                player1.setScale(0.1, 0.1);
                player2 = this.physics.add.sprite(650, 650, 'player2');
                player2.setScale(0.1, 0.1);

                timedStartGame = this.time.delayedCall(3000, startGame, [], this);
                startGameTimer = this.add.text(32, 32);
                /*
                 player1.anims.create({
                 frames: this.anims.generateFrameNumbers('player1', {start: 0, end: 1}),
                 frameRate: 10,
                 repeat: -1
                 });
                 
                 player2.anims.create({
                 frames: this.anims.generateFrameNumbers('player2', {start: 0, end: 1}),
                 frameRate: 10,
                 repeat: -1
                 });
                 */
                //Samurai enemigo
                samurai = this.physics.add.sprite(20, 575, 'samurai');
                samurai.setScale(0.35, 0.35);

                powerUp = this.physics.add.sprite(600, 500, 'powerup');

                //Colisiones con los límites del canvas
                ground.setCollideWorldBounds(true);
                player1.setCollideWorldBounds(true);
                player2.setCollideWorldBounds(true);
                samurai.setCollideWorldBounds(true);

                //Controles
                cursors = this.input.keyboard.createCursorKeys();
                keyW = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);

                //Colisiones
                this.physics.add.collider(player1, ground);
                this.physics.add.collider(player2, ground);
                this.physics.add.collider(samurai, ground);
                this.physics.add.collider(powerUp, ground);

                //Funciones que se activan si hay una colision
                this.physics.add.collider(player1, samurai, gameOverP1, null, this);
                this.physics.add.collider(player2, samurai, gameOverP2, null, this);
                this.physics.add.overlap(player2, powerUp, stopP1, null, this);
                this.physics.add.overlap(player1, powerUp, stopP2, null, this);
            }
            ;

            function update() {
                //time.setText('Event.progress: ' + startGame.getProgress().toString().substr(0, 4));
                if (startGameBool === true) {
                    var movePos = 4;
                    this.marioBg.tilePositionX += movePos;
                    /*
                     player1.anims.play('running1', true);
                     player1.anims.play('running2', true);
                     player2.anims.play('running1', true);
                     player2.anims.play('running2', true);
                     */

                    movePlayer(1);
                    movePlayer(2);
                    player1.setVelocityX(0);
                    player2.setVelocityX(0);

                    if (stopP1Bool === true) {
                        player1.setVelocityY(0);

                    } else if (stopP2Bool === true) {
                        player2.setVelocityY(0);
                    }
                }
            }

            function movePlayer(playerIndex) {
                var velocityY = 600;
                if (playerIndex === 1) {
                    //Saltar
                    //La tecla de salto es el cursor hacia arriba y se compruba si está pulsada. También se verifica si el personaje está tocando el suelo, ya que de lo
                    //contrario podría saltar mientras está en el aire. Si se cumplen estas dos condiciones, se aplica una velocidad vertical de 330 px/s.
                    if (cursors.up.isDown && player1.body.touching.down)
                    {
                        player1.setVelocityY(-velocityY);
                    }
                } else if (playerIndex === 2) {
                    //Saltar
                    //La tecla de salto es el cursor hacia arriba y se compruba si está pulsada. También se verifica si el personaje está tocando el suelo, ya que de lo
                    //contrario podría saltar mientras está en el aire. Si se cumplen estas dos condiciones, se aplica una velocidad vertical de 330 px/s.
                    if (keyW.isDown && player2.body.touching.down)
                    {
                        player2.setVelocityY(-velocityY);
                    }
                }
            }

            //Función que se activa si el jugador 1 colisiona con el samurai, en
            //tal caso, el jugador 2 gana
            function gameOverP1() {
                //Los jugadores ya no pueden moverse
                this.physics.pause();
                gameOver = true;
                p2WinsText = this.add.text(250, 300, 'PLAYER 2 WINS!', {
                    fontSize: '32px',
                    fill: '#000'
                });
            }

            //Función que se activa si el jugador 2 colisiona con el samurai, en
            //tal caso, el jugador 1 gana
            function gameOverP2() {
                //Los jugadores ya no pueden moverse
                this.physics.pause(p2WinsText);
                gameOver = true;
                p1WinsText = this.add.text(250, 300, 'PLAYER 1 WINS!', {
                    fontSize: '32px',
                    fill: '#000'
                });
            }

            function winnerP1() {
                this.physics.pause();
                gameOver = true;
                p1WinsText = this.add.text(250, 300, 'PLAYER 1 WINS!', {
                    fontSize: '32px',
                    fill: '#000'
                });
            }

            function winnerP2() {
                this.physics.pause();
                gameOver = true;
                p2WinsText = this.add.text(250, 300, 'PLAYER 2 WINS!', {
                    fontSize: '32px',
                    fill: '#000'
                });
            }

            function stopP1() {
                stopP1Bool = true;
                powerUp.disableBody(true, true);
            }

            function stopP2() {
                stopP2Bool = true;
                powerUp.disableBody(true, true);
            }

            function createFinishLine()
            {
                if (startGameBool === true) {
                    finishLine = this.physics.add.sprite(1400, 350, 'finishLine');
                    finishLine.setScale(0.05, 23);
                    this.physics.add.collider(finishLine, ground);
                    finishLine.setVelocityX(-500);
                    this.physics.add.collider(player1, finishLine, winnerP1, null, this);
                    this.physics.add.collider(player2, finishLine, winnerP2, null, this);
                }
            }

            function createPlatform()
            {
                if (startGameBool) {
                    this.platforms = this.physics.add.group({
                        allowGravity: false,
                        immovable: true
                    });
                    this.platforms.create(1600, 200, 'platform');
                    this.platforms.create(1500, 300, 'platform');
                    this.platforms.create(1400, 400, 'platform');
                    this.platforms.create(1300, 500, 'platform');
                    this.platforms.create(1200, 600, 'platform');
                    this.platforms.setVelocityX(-500);
                    this.physics.add.collider(player1, this.platforms);
                    this.physics.add.collider(player2, this.platforms);
                }
            }

            function startGame() {
                startGameBool = true;
                timedPlatforms = this.time.addEvent({delay: 6000, callback: createPlatform, callbackScope: this, loop: true});
                timedFinishLine = this.time.delayedCall(18000, createFinishLine, [], this);
                finishLineTimer = this.add.text(32, 64);
            }

        </script>
    </body>
</html>
